<?php

namespace App\Tests\Entity;

use App\Entity\User;
use App\Entity\Post;
use App\Entity\Comment;
use PHPUnit\Framework\TestCase;

class UserTest extends TestCase
{
    public function testSetUsername()
    {
        $user = new User();
        $username = 'john_doe';
        $user->setUsername($username);

        $this->assertEquals($username, $user->getUsername());
    }

    public function testGetUsername()
    {
        $user = new User();
        $username = 'john_doe';
        $user->setUsername($username);

        $this->assertEquals($username, $user->getUsername());
    }

    public function testSetEmail()
    {
        $user = new User();
        $email = 'john@example.com';
        $user->setEmail($email);

        $this->assertEquals($email, $user->getEmail());
    }

    public function testGetEmail()
    {
        $user = new User();
        $email = 'john@example.com';
        $user->setEmail($email);

        $this->assertEquals($email, $user->getEmail());
    }

    public function testSetPassword()
    {
        $user = new User();
        $password = 'password123';
        $user->setPassword($password);

        $this->assertEquals($password, $user->getPassword());
    }

    public function testGetPassword()
    {
        $user = new User();
        $password = 'password123';
        $user->setPassword($password);

        $this->assertEquals($password, $user->getPassword());
    }

    public function testGetUserIdentifier()
    {
        $user = new User();
        $username = 'john_doe';
        $user->setUsername($username);

        $this->assertEquals($username, $user->getUserIdentifier());
    }

    public function testSetRoles()
    {
        $user = new User();
        $roles = ['ROLE_ADMIN'];
        $user->setRoles($roles);

        $this->assertEquals($roles, $user->getRoles());
    }

    public function testGetRoles()
    {
        $user = new User();
        $this->assertEquals(['ROLE_USER'], $user->getRoles());

        // You can set additional roles
        $user->setRoles(['ROLE_ADMIN']);
        $this->assertContains('ROLE_ADMIN', $user->getRoles());
    }

    public function testEraseCredentials()
    {
        $user = new User();
        $user->eraseCredentials();
        $this->assertTrue(true); // `eraseCredentials()` can be left empty, so we just test if it exists
    }

    public function testAddPost()
    {
        $user = new User();
        $post = new Post();
        $post->setTitle('New Post');

        $user->addPost($post);

        $this->assertContains($post, $user->getPosts());
    }

    public function testRemovePost()
    {
        $user = new User();
        $post = new Post();
        $post->setTitle('New Post');

        $user->addPost($post);
        $user->removePost($post);

        $this->assertNotContains($post, $user->getPosts());
    }

    public function testGetPosts()
    {
        $user = new User();
        $post1 = new Post();
        $post2 = new Post();
        $user->addPost($post1);
        $user->addPost($post2);

        $this->assertCount(2, $user->getPosts());
    }

    public function testAddComment()
    {
        $user = new User();
        $comment = new Comment();
        $comment->setContent("This is a comment");

        $user->addComment($comment);

        $this->assertContains($comment, $user->getComments());
    }

    public function testRemoveComment()
    {
        $user = new User();
        $comment = new Comment();
        $comment->setContent("This is a comment");

        $user->addComment($comment);
        $user->removeComment($comment);

        $this->assertNotContains($comment, $user->getComments());
    }

    public function testGetComments()
    {
        $user = new User();
        $comment1 = new Comment();
        $comment2 = new Comment();
        $user->addComment($comment1);
        $user->addComment($comment2);

        $this->assertCount(2, $user->getComments());
    }

    public function testGetId()
    {
        $user = new User();

        // Since ID is usually generated by the database, it will be null before persistence
        $this->assertNull($user->getId());
    }
}
